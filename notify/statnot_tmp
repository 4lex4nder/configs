#!/usr/bin/env python

#
#   statnot - Status and Notifications
#
#   Lightweight notification-(to-become)-deamon intended to be used
#   with lightweight WMs, like dwm.
#   Receives Desktop Notifications (including libnotify / notify-send)
#   See: http://www.galago-project.org/specs/notification/0.9/index.html
#
#   Note: VERY early prototype, to get feedback.
#
#   Copyright (c) 2009-2011 by the authors
#   http://code.k2h.se
#   Please report bugs or feature requests by e-mail.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import dbus
import dbus.service
import dbus.mainloop.glib
import gobject
import os
import subprocess
import sys
import thread
import time
import json
#from htmlentitydefs import name2codepoint as n2cp
import re

# ===== CONFIGURATION DEFAULTS =====
#
# See helpstring below for what each setting does

DEFAULT_NOTIFY_TIMEOUT = 10000 # milliseconds
MAX_NOTIFY_TIMEOUT = 10000 # milliseconds
NOTIFICATION_MAX_LENGTH = 100 # number of characters
STATUS_UPDATE_INTERVAL = 2.0 # seconds
STATUS_COMMAND = ["/bin/sh", "%s/.statusline.sh" % os.getenv("HOME")]
USE_STATUSTEXT=False
QUEUE_NOTIFICATIONS=True
TMP_PATH = "/tmp/statnot_cache"
SIGNAL_ID = 12
SIGNAL_TARGET = 'i3blocks'
SIGNAL_CMD = 'pkill -RTMIN+' + str(SIGNAL_ID) + ' ' + SIGNAL_TARGET
PERM_PREFIX = {
        'KDE-Connect':['WhatsApp']
        }
OVERWRITE_ID_APPS = ['Weather']

def send_signal():
    os.system(SIGNAL_CMD)

# dwm
def update_text(text, file, queue_size):
    file.seek(0)
    file.truncate()

    if text:
        json.dump(text + [queue_size], file)
    else:
        json.dump(text, file)

    file.flush()
    send_signal()

notification_queue = []
notification_queue_lock = thread.allocate_lock()

def add_notification(notif):
    with notification_queue_lock:
        for index, n in enumerate(notification_queue):
            if n[1] == notif[1] and n[0] == notif[0]: # same id, replace instead of queue
                notification_queue[index] = notif
                return

        notification_queue.append(notif)

def next_notification(pop = False):
    # No need to be thread safe here. Also most common scenario
    if not notification_queue:
        return None

    with notification_queue_lock:
        if QUEUE_NOTIFICATIONS:
            # If there are several pending messages, discard the first 0-timeouts
            while len(notification_queue) > 1 and notification_queue[0][4] == 0:
                notification_queue.pop(0)
        else:
            while len(notification_queue) > 1:
                notification_queue.pop(0)

        if pop:
            return notification_queue.pop(0)
        else:
            return notification_queue[0]

def message_thread(dummy):
    file_out = open(TMP_PATH, "w")
    last_status_update = 0
    last_notification_update = 0
    current_notification_data = []

    while 1:
        notif = next_notification()
        current_time = time.time()
        update_status = False

        if notif:
            # Currently no notification dispalyed
            if not current_notification_data or (notif[0] == current_notification_data[0] and notif[1] != current_notification_data[1]):
                update_status = True
            # Update notification content
            elif current_notification_data and notif[1] == current_notification_data[1] and current_notification_data[0] == notif[0] and (notif[2] != current_notification_data[2] or notif[3] != current_notification_data[3]):
                update_status = True

            elif current_time > last_notification_update + notif[4]:
                # If requested timeout is zero, notification shows until
                # a new notification arrives or a regular status mesasge
                # cleans it
                # This way is a bit risky, but works. Keep an eye on this
                # when changing code
                if notif[4] != 0:
                    update_status = True
                
                # Pop expired notification
                next_notification(True)
                notif = next_notification()

            if update_status == True:
                last_notification_update = current_time

            if current_time > last_status_update + STATUS_UPDATE_INTERVAL:
                update_status = True

        if update_status:
            queue_size = len(notification_queue)
            if notif:
                current_notification_data = notif
            else:
                current_notification_data = []

            update_text(current_notification_data, file_out, queue_size)

            last_status_update = current_time

        time.sleep(0.2)
    file_out.close()

class NotificationFetcher(dbus.service.Object):
    _id = 0

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='susssasa{ss}i',
                         out_signature='u')
    def Notify(self, app_name, notification_id, app_icon,
               summary, body, actions, hints, expire_timeout):
        if (expire_timeout < 0) or (expire_timeout > MAX_NOTIFY_TIMEOUT):
            expire_timeout = DEFAULT_NOTIFY_TIMEOUT

        if app_name in PERM_PREFIX:
            if not PERM_PREFIX[app_name] or True in map(lambda x: body.startswith(x), PERM_PREFIX[app_name]):
                expire_timeout = 0

        if not notification_id:
            self._id += 1
            notification_id = self._id

        if app_name in OVERWRITE_ID_APPS:
            self._id = 0
            notification_id = self._id

        #print('app=' + app_name + ' id=' + str(notification_id) + ' summary=' + summary + ' body=' + body)

        #text = ("%s %s" % (summary, body)).strip()
        #add_notification( [notification_id,
        #                  text[:NOTIFICATION_MAX_LENGTH],
        #                  int(expire_timeout) / 1000.0] )
        add_notification([app_name, notification_id, summary, body, int(expire_timeout) / 1000.0])
        return notification_id

    @dbus.service.method("org.freedesktop.Notifications", in_signature='', out_signature='as')
    def GetCapabilities(self):
        return ("body")

    @dbus.service.signal('org.freedesktop.Notifications', signature='uu')
    def NotificationClosed(self, id_in, reason_in):
        pass

    @dbus.service.method("org.freedesktop.Notifications", in_signature='u', out_signature='')
    def CloseNotification(self, id):
        pass

    @dbus.service.method("org.freedesktop.Notifications", in_signature='', out_signature='ssss')
    def GetServerInformation(self):
      return ("statnot", "http://code.k2h.se", "0.0.2", "1")

if __name__ == '__main__':
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    session_bus = dbus.SessionBus()
    name = dbus.service.BusName("org.freedesktop.Notifications", session_bus)
    nf = NotificationFetcher(session_bus, '/org/freedesktop/Notifications')

    # We must use contexts and iterations to run threads
    # http://www.jejik.com/articles/2007/01/python-gstreamer_threading_and_the_main_loop/
    gobject.threads_init()
    #gi.threads_init()
    context = gobject.MainLoop().get_context()
    thread.start_new_thread(message_thread, (None,))

    while 1:
        context.iteration(True)

